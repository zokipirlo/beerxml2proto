// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: beer.proto at 11:1
package beer.hapibrew.beerxml2proto.proto;

import android.os.Parcelable;
import android.support.annotation.Nullable;
import com.squareup.wire.AndroidMessage;
import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class Recipe extends AndroidMessage<Recipe, Recipe.Builder> {
  public static final ProtoAdapter<Recipe> ADAPTER = new ProtoAdapter_Recipe();

  public static final Parcelable.Creator<Recipe> CREATOR = AndroidMessage.newCreator(ADAPTER);

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_NAME = "";

  public static final Integer DEFAULT_VERSION = 1;

  public static final RecipeType DEFAULT_TYPE = RecipeType.ALL_GRAIN;

  public static final Double DEFAULT_BATCH_SIZE = 0.0d;

  public static final Double DEFAULT_BOIL_SIZE = 0.0d;

  public static final Integer DEFAULT_BOIL_TIME = 0;

  public static final Double DEFAULT_EFFICIENCY = 75.0d;

  public static final Double DEFAULT_EST_OG = 1.000d;

  public static final Double DEFAULT_EST_FG = 1.000d;

  public static final Double DEFAULT_EST_ABV = 0.0d;

  public static final Double DEFAULT_EST_SRM = 0d;

  public static final Double DEFAULT_EST_IBU = 0d;

  public static final String DEFAULT_NOTES = "";

  public static final String DEFAULT_BREWER = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @Nullable
  public final String name;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  @Nullable
  public final Integer version;

  @WireField(
      tag = 3,
      adapter = "beer.hapibrew.beerxml2proto.proto.RecipeType#ADAPTER"
  )
  @Nullable
  public final RecipeType type;

  @WireField(
      tag = 4,
      adapter = "beer.hapibrew.beerxml2proto.proto.Style#ADAPTER"
  )
  @Nullable
  public final Style style;

  @WireField(
      tag = 5,
      adapter = "beer.hapibrew.beerxml2proto.proto.Hop#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Hop> hops;

  @WireField(
      tag = 6,
      adapter = "beer.hapibrew.beerxml2proto.proto.Fermentable#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Fermentable> fermentables;

  @WireField(
      tag = 7,
      adapter = "beer.hapibrew.beerxml2proto.proto.Misc#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Misc> miscs;

  @WireField(
      tag = 8,
      adapter = "beer.hapibrew.beerxml2proto.proto.Yeast#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Yeast> yeasts;

  @WireField(
      tag = 9,
      adapter = "beer.hapibrew.beerxml2proto.proto.Water#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Water> waters;

  @WireField(
      tag = 10,
      adapter = "beer.hapibrew.beerxml2proto.proto.Mash#ADAPTER"
  )
  @Nullable
  public final Mash mash;

  @WireField(
      tag = 11,
      adapter = "beer.hapibrew.beerxml2proto.proto.Fermentation#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Fermentation> fermentations;

  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double batch_size;

  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double boil_size;

  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  @Nullable
  public final Integer boil_time;

  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double efficiency;

  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double est_og;

  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double est_fg;

  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double est_abv;

  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double est_srm;

  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double est_ibu;

  @WireField(
      tag = 21,
      adapter = "beer.hapibrew.beerxml2proto.proto.Equipment#ADAPTER"
  )
  @Nullable
  public final Equipment equipment;

  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @Nullable
  public final String notes;

  @WireField(
      tag = 23,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @Nullable
  public final String brewer;

  public Recipe(@Nullable String name, @Nullable Integer version, @Nullable RecipeType type, @Nullable Style style, List<Hop> hops, List<Fermentable> fermentables, List<Misc> miscs, List<Yeast> yeasts, List<Water> waters, @Nullable Mash mash, List<Fermentation> fermentations, @Nullable Double batch_size, @Nullable Double boil_size, @Nullable Integer boil_time, @Nullable Double efficiency, @Nullable Double est_og, @Nullable Double est_fg, @Nullable Double est_abv, @Nullable Double est_srm, @Nullable Double est_ibu, @Nullable Equipment equipment, @Nullable String notes, @Nullable String brewer) {
    this(name, version, type, style, hops, fermentables, miscs, yeasts, waters, mash, fermentations, batch_size, boil_size, boil_time, efficiency, est_og, est_fg, est_abv, est_srm, est_ibu, equipment, notes, brewer, ByteString.EMPTY);
  }

  public Recipe(@Nullable String name, @Nullable Integer version, @Nullable RecipeType type, @Nullable Style style, List<Hop> hops, List<Fermentable> fermentables, List<Misc> miscs, List<Yeast> yeasts, List<Water> waters, @Nullable Mash mash, List<Fermentation> fermentations, @Nullable Double batch_size, @Nullable Double boil_size, @Nullable Integer boil_time, @Nullable Double efficiency, @Nullable Double est_og, @Nullable Double est_fg, @Nullable Double est_abv, @Nullable Double est_srm, @Nullable Double est_ibu, @Nullable Equipment equipment, @Nullable String notes, @Nullable String brewer, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.name = name;
    this.version = version;
    this.type = type;
    this.style = style;
    this.hops = Internal.immutableCopyOf("hops", hops);
    this.fermentables = Internal.immutableCopyOf("fermentables", fermentables);
    this.miscs = Internal.immutableCopyOf("miscs", miscs);
    this.yeasts = Internal.immutableCopyOf("yeasts", yeasts);
    this.waters = Internal.immutableCopyOf("waters", waters);
    this.mash = mash;
    this.fermentations = Internal.immutableCopyOf("fermentations", fermentations);
    this.batch_size = batch_size;
    this.boil_size = boil_size;
    this.boil_time = boil_time;
    this.efficiency = efficiency;
    this.est_og = est_og;
    this.est_fg = est_fg;
    this.est_abv = est_abv;
    this.est_srm = est_srm;
    this.est_ibu = est_ibu;
    this.equipment = equipment;
    this.notes = notes;
    this.brewer = brewer;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.name = name;
    builder.version = version;
    builder.type = type;
    builder.style = style;
    builder.hops = Internal.copyOf("hops", hops);
    builder.fermentables = Internal.copyOf("fermentables", fermentables);
    builder.miscs = Internal.copyOf("miscs", miscs);
    builder.yeasts = Internal.copyOf("yeasts", yeasts);
    builder.waters = Internal.copyOf("waters", waters);
    builder.mash = mash;
    builder.fermentations = Internal.copyOf("fermentations", fermentations);
    builder.batch_size = batch_size;
    builder.boil_size = boil_size;
    builder.boil_time = boil_time;
    builder.efficiency = efficiency;
    builder.est_og = est_og;
    builder.est_fg = est_fg;
    builder.est_abv = est_abv;
    builder.est_srm = est_srm;
    builder.est_ibu = est_ibu;
    builder.equipment = equipment;
    builder.notes = notes;
    builder.brewer = brewer;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Recipe)) return false;
    Recipe o = (Recipe) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(name, o.name)
        && Internal.equals(version, o.version)
        && Internal.equals(type, o.type)
        && Internal.equals(style, o.style)
        && hops.equals(o.hops)
        && fermentables.equals(o.fermentables)
        && miscs.equals(o.miscs)
        && yeasts.equals(o.yeasts)
        && waters.equals(o.waters)
        && Internal.equals(mash, o.mash)
        && fermentations.equals(o.fermentations)
        && Internal.equals(batch_size, o.batch_size)
        && Internal.equals(boil_size, o.boil_size)
        && Internal.equals(boil_time, o.boil_time)
        && Internal.equals(efficiency, o.efficiency)
        && Internal.equals(est_og, o.est_og)
        && Internal.equals(est_fg, o.est_fg)
        && Internal.equals(est_abv, o.est_abv)
        && Internal.equals(est_srm, o.est_srm)
        && Internal.equals(est_ibu, o.est_ibu)
        && Internal.equals(equipment, o.equipment)
        && Internal.equals(notes, o.notes)
        && Internal.equals(brewer, o.brewer);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (version != null ? version.hashCode() : 0);
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (style != null ? style.hashCode() : 0);
      result = result * 37 + hops.hashCode();
      result = result * 37 + fermentables.hashCode();
      result = result * 37 + miscs.hashCode();
      result = result * 37 + yeasts.hashCode();
      result = result * 37 + waters.hashCode();
      result = result * 37 + (mash != null ? mash.hashCode() : 0);
      result = result * 37 + fermentations.hashCode();
      result = result * 37 + (batch_size != null ? batch_size.hashCode() : 0);
      result = result * 37 + (boil_size != null ? boil_size.hashCode() : 0);
      result = result * 37 + (boil_time != null ? boil_time.hashCode() : 0);
      result = result * 37 + (efficiency != null ? efficiency.hashCode() : 0);
      result = result * 37 + (est_og != null ? est_og.hashCode() : 0);
      result = result * 37 + (est_fg != null ? est_fg.hashCode() : 0);
      result = result * 37 + (est_abv != null ? est_abv.hashCode() : 0);
      result = result * 37 + (est_srm != null ? est_srm.hashCode() : 0);
      result = result * 37 + (est_ibu != null ? est_ibu.hashCode() : 0);
      result = result * 37 + (equipment != null ? equipment.hashCode() : 0);
      result = result * 37 + (notes != null ? notes.hashCode() : 0);
      result = result * 37 + (brewer != null ? brewer.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (name != null) builder.append(", name=").append(name);
    if (version != null) builder.append(", version=").append(version);
    if (type != null) builder.append(", type=").append(type);
    if (style != null) builder.append(", style=").append(style);
    if (!hops.isEmpty()) builder.append(", hops=").append(hops);
    if (!fermentables.isEmpty()) builder.append(", fermentables=").append(fermentables);
    if (!miscs.isEmpty()) builder.append(", miscs=").append(miscs);
    if (!yeasts.isEmpty()) builder.append(", yeasts=").append(yeasts);
    if (!waters.isEmpty()) builder.append(", waters=").append(waters);
    if (mash != null) builder.append(", mash=").append(mash);
    if (!fermentations.isEmpty()) builder.append(", fermentations=").append(fermentations);
    if (batch_size != null) builder.append(", batch_size=").append(batch_size);
    if (boil_size != null) builder.append(", boil_size=").append(boil_size);
    if (boil_time != null) builder.append(", boil_time=").append(boil_time);
    if (efficiency != null) builder.append(", efficiency=").append(efficiency);
    if (est_og != null) builder.append(", est_og=").append(est_og);
    if (est_fg != null) builder.append(", est_fg=").append(est_fg);
    if (est_abv != null) builder.append(", est_abv=").append(est_abv);
    if (est_srm != null) builder.append(", est_srm=").append(est_srm);
    if (est_ibu != null) builder.append(", est_ibu=").append(est_ibu);
    if (equipment != null) builder.append(", equipment=").append(equipment);
    if (notes != null) builder.append(", notes=").append(notes);
    if (brewer != null) builder.append(", brewer=").append(brewer);
    return builder.replace(0, 2, "Recipe{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Recipe, Builder> {
    public String name;

    public Integer version;

    public RecipeType type;

    public Style style;

    public List<Hop> hops;

    public List<Fermentable> fermentables;

    public List<Misc> miscs;

    public List<Yeast> yeasts;

    public List<Water> waters;

    public Mash mash;

    public List<Fermentation> fermentations;

    public Double batch_size;

    public Double boil_size;

    public Integer boil_time;

    public Double efficiency;

    public Double est_og;

    public Double est_fg;

    public Double est_abv;

    public Double est_srm;

    public Double est_ibu;

    public Equipment equipment;

    public String notes;

    public String brewer;

    public Builder() {
      hops = Internal.newMutableList();
      fermentables = Internal.newMutableList();
      miscs = Internal.newMutableList();
      yeasts = Internal.newMutableList();
      waters = Internal.newMutableList();
      fermentations = Internal.newMutableList();
    }

    public Builder name(String name) {
      this.name = name;
      return this;
    }

    public Builder version(Integer version) {
      this.version = version;
      return this;
    }

    public Builder type(RecipeType type) {
      this.type = type;
      return this;
    }

    public Builder style(Style style) {
      this.style = style;
      return this;
    }

    public Builder hops(List<Hop> hops) {
      Internal.checkElementsNotNull(hops);
      this.hops = hops;
      return this;
    }

    public Builder fermentables(List<Fermentable> fermentables) {
      Internal.checkElementsNotNull(fermentables);
      this.fermentables = fermentables;
      return this;
    }

    public Builder miscs(List<Misc> miscs) {
      Internal.checkElementsNotNull(miscs);
      this.miscs = miscs;
      return this;
    }

    public Builder yeasts(List<Yeast> yeasts) {
      Internal.checkElementsNotNull(yeasts);
      this.yeasts = yeasts;
      return this;
    }

    public Builder waters(List<Water> waters) {
      Internal.checkElementsNotNull(waters);
      this.waters = waters;
      return this;
    }

    public Builder mash(Mash mash) {
      this.mash = mash;
      return this;
    }

    public Builder fermentations(List<Fermentation> fermentations) {
      Internal.checkElementsNotNull(fermentations);
      this.fermentations = fermentations;
      return this;
    }

    public Builder batch_size(Double batch_size) {
      this.batch_size = batch_size;
      return this;
    }

    public Builder boil_size(Double boil_size) {
      this.boil_size = boil_size;
      return this;
    }

    public Builder boil_time(Integer boil_time) {
      this.boil_time = boil_time;
      return this;
    }

    public Builder efficiency(Double efficiency) {
      this.efficiency = efficiency;
      return this;
    }

    public Builder est_og(Double est_og) {
      this.est_og = est_og;
      return this;
    }

    public Builder est_fg(Double est_fg) {
      this.est_fg = est_fg;
      return this;
    }

    public Builder est_abv(Double est_abv) {
      this.est_abv = est_abv;
      return this;
    }

    public Builder est_srm(Double est_srm) {
      this.est_srm = est_srm;
      return this;
    }

    public Builder est_ibu(Double est_ibu) {
      this.est_ibu = est_ibu;
      return this;
    }

    public Builder equipment(Equipment equipment) {
      this.equipment = equipment;
      return this;
    }

    public Builder notes(String notes) {
      this.notes = notes;
      return this;
    }

    public Builder brewer(String brewer) {
      this.brewer = brewer;
      return this;
    }

    @Override
    public Recipe build() {
      return new Recipe(name, version, type, style, hops, fermentables, miscs, yeasts, waters, mash, fermentations, batch_size, boil_size, boil_time, efficiency, est_og, est_fg, est_abv, est_srm, est_ibu, equipment, notes, brewer, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Recipe extends ProtoAdapter<Recipe> {
    ProtoAdapter_Recipe() {
      super(FieldEncoding.LENGTH_DELIMITED, Recipe.class);
    }

    @Override
    public int encodedSize(Recipe value) {
      return (value.name != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.name) : 0)
          + (value.version != null ? ProtoAdapter.INT32.encodedSizeWithTag(2, value.version) : 0)
          + (value.type != null ? RecipeType.ADAPTER.encodedSizeWithTag(3, value.type) : 0)
          + (value.style != null ? Style.ADAPTER.encodedSizeWithTag(4, value.style) : 0)
          + Hop.ADAPTER.asRepeated().encodedSizeWithTag(5, value.hops)
          + Fermentable.ADAPTER.asRepeated().encodedSizeWithTag(6, value.fermentables)
          + Misc.ADAPTER.asRepeated().encodedSizeWithTag(7, value.miscs)
          + Yeast.ADAPTER.asRepeated().encodedSizeWithTag(8, value.yeasts)
          + Water.ADAPTER.asRepeated().encodedSizeWithTag(9, value.waters)
          + (value.mash != null ? Mash.ADAPTER.encodedSizeWithTag(10, value.mash) : 0)
          + Fermentation.ADAPTER.asRepeated().encodedSizeWithTag(11, value.fermentations)
          + (value.batch_size != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(12, value.batch_size) : 0)
          + (value.boil_size != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(13, value.boil_size) : 0)
          + (value.boil_time != null ? ProtoAdapter.INT32.encodedSizeWithTag(14, value.boil_time) : 0)
          + (value.efficiency != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(15, value.efficiency) : 0)
          + (value.est_og != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(16, value.est_og) : 0)
          + (value.est_fg != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(17, value.est_fg) : 0)
          + (value.est_abv != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(18, value.est_abv) : 0)
          + (value.est_srm != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(19, value.est_srm) : 0)
          + (value.est_ibu != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(20, value.est_ibu) : 0)
          + (value.equipment != null ? Equipment.ADAPTER.encodedSizeWithTag(21, value.equipment) : 0)
          + (value.notes != null ? ProtoAdapter.STRING.encodedSizeWithTag(22, value.notes) : 0)
          + (value.brewer != null ? ProtoAdapter.STRING.encodedSizeWithTag(23, value.brewer) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Recipe value) throws IOException {
      if (value.name != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name);
      if (value.version != null) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.version);
      if (value.type != null) RecipeType.ADAPTER.encodeWithTag(writer, 3, value.type);
      if (value.style != null) Style.ADAPTER.encodeWithTag(writer, 4, value.style);
      Hop.ADAPTER.asRepeated().encodeWithTag(writer, 5, value.hops);
      Fermentable.ADAPTER.asRepeated().encodeWithTag(writer, 6, value.fermentables);
      Misc.ADAPTER.asRepeated().encodeWithTag(writer, 7, value.miscs);
      Yeast.ADAPTER.asRepeated().encodeWithTag(writer, 8, value.yeasts);
      Water.ADAPTER.asRepeated().encodeWithTag(writer, 9, value.waters);
      if (value.mash != null) Mash.ADAPTER.encodeWithTag(writer, 10, value.mash);
      Fermentation.ADAPTER.asRepeated().encodeWithTag(writer, 11, value.fermentations);
      if (value.batch_size != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 12, value.batch_size);
      if (value.boil_size != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 13, value.boil_size);
      if (value.boil_time != null) ProtoAdapter.INT32.encodeWithTag(writer, 14, value.boil_time);
      if (value.efficiency != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 15, value.efficiency);
      if (value.est_og != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 16, value.est_og);
      if (value.est_fg != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 17, value.est_fg);
      if (value.est_abv != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 18, value.est_abv);
      if (value.est_srm != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 19, value.est_srm);
      if (value.est_ibu != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 20, value.est_ibu);
      if (value.equipment != null) Equipment.ADAPTER.encodeWithTag(writer, 21, value.equipment);
      if (value.notes != null) ProtoAdapter.STRING.encodeWithTag(writer, 22, value.notes);
      if (value.brewer != null) ProtoAdapter.STRING.encodeWithTag(writer, 23, value.brewer);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Recipe decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.name(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.version(ProtoAdapter.INT32.decode(reader)); break;
          case 3: {
            try {
              builder.type(RecipeType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 4: builder.style(Style.ADAPTER.decode(reader)); break;
          case 5: builder.hops.add(Hop.ADAPTER.decode(reader)); break;
          case 6: builder.fermentables.add(Fermentable.ADAPTER.decode(reader)); break;
          case 7: builder.miscs.add(Misc.ADAPTER.decode(reader)); break;
          case 8: builder.yeasts.add(Yeast.ADAPTER.decode(reader)); break;
          case 9: builder.waters.add(Water.ADAPTER.decode(reader)); break;
          case 10: builder.mash(Mash.ADAPTER.decode(reader)); break;
          case 11: builder.fermentations.add(Fermentation.ADAPTER.decode(reader)); break;
          case 12: builder.batch_size(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 13: builder.boil_size(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 14: builder.boil_time(ProtoAdapter.INT32.decode(reader)); break;
          case 15: builder.efficiency(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 16: builder.est_og(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 17: builder.est_fg(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 18: builder.est_abv(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 19: builder.est_srm(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 20: builder.est_ibu(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 21: builder.equipment(Equipment.ADAPTER.decode(reader)); break;
          case 22: builder.notes(ProtoAdapter.STRING.decode(reader)); break;
          case 23: builder.brewer(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Recipe redact(Recipe value) {
      Builder builder = value.newBuilder();
      if (builder.style != null) builder.style = Style.ADAPTER.redact(builder.style);
      Internal.redactElements(builder.hops, Hop.ADAPTER);
      Internal.redactElements(builder.fermentables, Fermentable.ADAPTER);
      Internal.redactElements(builder.miscs, Misc.ADAPTER);
      Internal.redactElements(builder.yeasts, Yeast.ADAPTER);
      Internal.redactElements(builder.waters, Water.ADAPTER);
      if (builder.mash != null) builder.mash = Mash.ADAPTER.redact(builder.mash);
      Internal.redactElements(builder.fermentations, Fermentation.ADAPTER);
      if (builder.equipment != null) builder.equipment = Equipment.ADAPTER.redact(builder.equipment);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
