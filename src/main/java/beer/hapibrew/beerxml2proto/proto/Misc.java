// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: beer.proto at 121:1
package beer.hapibrew.beerxml2proto.proto;

import android.os.Parcelable;
import android.support.annotation.Nullable;
import com.squareup.wire.AndroidMessage;
import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class Misc extends AndroidMessage<Misc, Misc.Builder> {
  public static final ProtoAdapter<Misc> ADAPTER = new ProtoAdapter_Misc();

  public static final Parcelable.Creator<Misc> CREATOR = AndroidMessage.newCreator(ADAPTER);

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_NAME = "";

  public static final Integer DEFAULT_VERSION = 1;

  public static final MiscType DEFAULT_TYPE = MiscType.SPICE;

  public static final MiscUse DEFAULT_USE = MiscUse.BOIL;

  public static final Double DEFAULT_AMOUNT = 0.0d;

  public static final Double DEFAULT_TIME = 0.0d;

  public static final Boolean DEFAULT_AMOUNT_IS_WEIGHT = false;

  public static final String DEFAULT_USE_FOR = "";

  public static final String DEFAULT_NOTES = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @Nullable
  public final String name;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  @Nullable
  public final Integer version;

  @WireField(
      tag = 3,
      adapter = "beer.hapibrew.beerxml2proto.proto.MiscType#ADAPTER"
  )
  @Nullable
  public final MiscType type;

  @WireField(
      tag = 4,
      adapter = "beer.hapibrew.beerxml2proto.proto.MiscUse#ADAPTER"
  )
  @Nullable
  public final MiscUse use;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double amount;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double time;

  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  @Nullable
  public final Boolean amount_is_weight;

  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @Nullable
  public final String use_for;

  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @Nullable
  public final String notes;

  public Misc(@Nullable String name, @Nullable Integer version, @Nullable MiscType type, @Nullable MiscUse use, @Nullable Double amount, @Nullable Double time, @Nullable Boolean amount_is_weight, @Nullable String use_for, @Nullable String notes) {
    this(name, version, type, use, amount, time, amount_is_weight, use_for, notes, ByteString.EMPTY);
  }

  public Misc(@Nullable String name, @Nullable Integer version, @Nullable MiscType type, @Nullable MiscUse use, @Nullable Double amount, @Nullable Double time, @Nullable Boolean amount_is_weight, @Nullable String use_for, @Nullable String notes, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.name = name;
    this.version = version;
    this.type = type;
    this.use = use;
    this.amount = amount;
    this.time = time;
    this.amount_is_weight = amount_is_weight;
    this.use_for = use_for;
    this.notes = notes;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.name = name;
    builder.version = version;
    builder.type = type;
    builder.use = use;
    builder.amount = amount;
    builder.time = time;
    builder.amount_is_weight = amount_is_weight;
    builder.use_for = use_for;
    builder.notes = notes;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Misc)) return false;
    Misc o = (Misc) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(name, o.name)
        && Internal.equals(version, o.version)
        && Internal.equals(type, o.type)
        && Internal.equals(use, o.use)
        && Internal.equals(amount, o.amount)
        && Internal.equals(time, o.time)
        && Internal.equals(amount_is_weight, o.amount_is_weight)
        && Internal.equals(use_for, o.use_for)
        && Internal.equals(notes, o.notes);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (version != null ? version.hashCode() : 0);
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (use != null ? use.hashCode() : 0);
      result = result * 37 + (amount != null ? amount.hashCode() : 0);
      result = result * 37 + (time != null ? time.hashCode() : 0);
      result = result * 37 + (amount_is_weight != null ? amount_is_weight.hashCode() : 0);
      result = result * 37 + (use_for != null ? use_for.hashCode() : 0);
      result = result * 37 + (notes != null ? notes.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (name != null) builder.append(", name=").append(name);
    if (version != null) builder.append(", version=").append(version);
    if (type != null) builder.append(", type=").append(type);
    if (use != null) builder.append(", use=").append(use);
    if (amount != null) builder.append(", amount=").append(amount);
    if (time != null) builder.append(", time=").append(time);
    if (amount_is_weight != null) builder.append(", amount_is_weight=").append(amount_is_weight);
    if (use_for != null) builder.append(", use_for=").append(use_for);
    if (notes != null) builder.append(", notes=").append(notes);
    return builder.replace(0, 2, "Misc{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Misc, Builder> {
    public String name;

    public Integer version;

    public MiscType type;

    public MiscUse use;

    public Double amount;

    public Double time;

    public Boolean amount_is_weight;

    public String use_for;

    public String notes;

    public Builder() {
    }

    public Builder name(String name) {
      this.name = name;
      return this;
    }

    public Builder version(Integer version) {
      this.version = version;
      return this;
    }

    public Builder type(MiscType type) {
      this.type = type;
      return this;
    }

    public Builder use(MiscUse use) {
      this.use = use;
      return this;
    }

    public Builder amount(Double amount) {
      this.amount = amount;
      return this;
    }

    public Builder time(Double time) {
      this.time = time;
      return this;
    }

    public Builder amount_is_weight(Boolean amount_is_weight) {
      this.amount_is_weight = amount_is_weight;
      return this;
    }

    public Builder use_for(String use_for) {
      this.use_for = use_for;
      return this;
    }

    public Builder notes(String notes) {
      this.notes = notes;
      return this;
    }

    @Override
    public Misc build() {
      return new Misc(name, version, type, use, amount, time, amount_is_weight, use_for, notes, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Misc extends ProtoAdapter<Misc> {
    ProtoAdapter_Misc() {
      super(FieldEncoding.LENGTH_DELIMITED, Misc.class);
    }

    @Override
    public int encodedSize(Misc value) {
      return (value.name != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.name) : 0)
          + (value.version != null ? ProtoAdapter.INT32.encodedSizeWithTag(2, value.version) : 0)
          + (value.type != null ? MiscType.ADAPTER.encodedSizeWithTag(3, value.type) : 0)
          + (value.use != null ? MiscUse.ADAPTER.encodedSizeWithTag(4, value.use) : 0)
          + (value.amount != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(5, value.amount) : 0)
          + (value.time != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(6, value.time) : 0)
          + (value.amount_is_weight != null ? ProtoAdapter.BOOL.encodedSizeWithTag(7, value.amount_is_weight) : 0)
          + (value.use_for != null ? ProtoAdapter.STRING.encodedSizeWithTag(8, value.use_for) : 0)
          + (value.notes != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.notes) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Misc value) throws IOException {
      if (value.name != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name);
      if (value.version != null) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.version);
      if (value.type != null) MiscType.ADAPTER.encodeWithTag(writer, 3, value.type);
      if (value.use != null) MiscUse.ADAPTER.encodeWithTag(writer, 4, value.use);
      if (value.amount != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 5, value.amount);
      if (value.time != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 6, value.time);
      if (value.amount_is_weight != null) ProtoAdapter.BOOL.encodeWithTag(writer, 7, value.amount_is_weight);
      if (value.use_for != null) ProtoAdapter.STRING.encodeWithTag(writer, 8, value.use_for);
      if (value.notes != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.notes);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Misc decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.name(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.version(ProtoAdapter.INT32.decode(reader)); break;
          case 3: {
            try {
              builder.type(MiscType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 4: {
            try {
              builder.use(MiscUse.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 5: builder.amount(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 6: builder.time(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 7: builder.amount_is_weight(ProtoAdapter.BOOL.decode(reader)); break;
          case 8: builder.use_for(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.notes(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Misc redact(Misc value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
