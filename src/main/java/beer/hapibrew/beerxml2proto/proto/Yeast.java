// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: beer.proto at 146:1
package beer.hapibrew.beerxml2proto.proto;

import android.os.Parcelable;
import android.support.annotation.Nullable;
import com.squareup.wire.AndroidMessage;
import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class Yeast extends AndroidMessage<Yeast, Yeast.Builder> {
  public static final ProtoAdapter<Yeast> ADAPTER = new ProtoAdapter_Yeast();

  public static final Parcelable.Creator<Yeast> CREATOR = AndroidMessage.newCreator(ADAPTER);

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_NAME = "";

  public static final Integer DEFAULT_VERSION = 1;

  public static final String DEFAULT_LABORATORY = "";

  public static final String DEFAULT_PRODUCT_ID = "";

  public static final YeastType DEFAULT_TYPE = YeastType.ALE;

  public static final YeastForm DEFAULT_FORM = YeastForm.LIQUID;

  public static final Double DEFAULT_AMOUNT = 0.0d;

  public static final Boolean DEFAULT_AMOUNT_IS_WEIGHT = false;

  public static final Double DEFAULT_ATTENUATION = 0.0d;

  public static final Double DEFAULT_MIN_TEMP = 0.0d;

  public static final Double DEFAULT_MAX_TEMP = 0.0d;

  public static final String DEFAULT_NOTES = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @Nullable
  public final String name;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  @Nullable
  public final Integer version;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @Nullable
  public final String laboratory;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @Nullable
  public final String product_id;

  @WireField(
      tag = 5,
      adapter = "beer.hapibrew.beerxml2proto.proto.YeastType#ADAPTER"
  )
  @Nullable
  public final YeastType type;

  @WireField(
      tag = 6,
      adapter = "beer.hapibrew.beerxml2proto.proto.YeastForm#ADAPTER"
  )
  @Nullable
  public final YeastForm form;

  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double amount;

  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  @Nullable
  public final Boolean amount_is_weight;

  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double attenuation;

  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double min_temp;

  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double max_temp;

  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @Nullable
  public final String notes;

  public Yeast(@Nullable String name, @Nullable Integer version, @Nullable String laboratory, @Nullable String product_id, @Nullable YeastType type, @Nullable YeastForm form, @Nullable Double amount, @Nullable Boolean amount_is_weight, @Nullable Double attenuation, @Nullable Double min_temp, @Nullable Double max_temp, @Nullable String notes) {
    this(name, version, laboratory, product_id, type, form, amount, amount_is_weight, attenuation, min_temp, max_temp, notes, ByteString.EMPTY);
  }

  public Yeast(@Nullable String name, @Nullable Integer version, @Nullable String laboratory, @Nullable String product_id, @Nullable YeastType type, @Nullable YeastForm form, @Nullable Double amount, @Nullable Boolean amount_is_weight, @Nullable Double attenuation, @Nullable Double min_temp, @Nullable Double max_temp, @Nullable String notes, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.name = name;
    this.version = version;
    this.laboratory = laboratory;
    this.product_id = product_id;
    this.type = type;
    this.form = form;
    this.amount = amount;
    this.amount_is_weight = amount_is_weight;
    this.attenuation = attenuation;
    this.min_temp = min_temp;
    this.max_temp = max_temp;
    this.notes = notes;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.name = name;
    builder.version = version;
    builder.laboratory = laboratory;
    builder.product_id = product_id;
    builder.type = type;
    builder.form = form;
    builder.amount = amount;
    builder.amount_is_weight = amount_is_weight;
    builder.attenuation = attenuation;
    builder.min_temp = min_temp;
    builder.max_temp = max_temp;
    builder.notes = notes;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Yeast)) return false;
    Yeast o = (Yeast) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(name, o.name)
        && Internal.equals(version, o.version)
        && Internal.equals(laboratory, o.laboratory)
        && Internal.equals(product_id, o.product_id)
        && Internal.equals(type, o.type)
        && Internal.equals(form, o.form)
        && Internal.equals(amount, o.amount)
        && Internal.equals(amount_is_weight, o.amount_is_weight)
        && Internal.equals(attenuation, o.attenuation)
        && Internal.equals(min_temp, o.min_temp)
        && Internal.equals(max_temp, o.max_temp)
        && Internal.equals(notes, o.notes);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (version != null ? version.hashCode() : 0);
      result = result * 37 + (laboratory != null ? laboratory.hashCode() : 0);
      result = result * 37 + (product_id != null ? product_id.hashCode() : 0);
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (form != null ? form.hashCode() : 0);
      result = result * 37 + (amount != null ? amount.hashCode() : 0);
      result = result * 37 + (amount_is_weight != null ? amount_is_weight.hashCode() : 0);
      result = result * 37 + (attenuation != null ? attenuation.hashCode() : 0);
      result = result * 37 + (min_temp != null ? min_temp.hashCode() : 0);
      result = result * 37 + (max_temp != null ? max_temp.hashCode() : 0);
      result = result * 37 + (notes != null ? notes.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (name != null) builder.append(", name=").append(name);
    if (version != null) builder.append(", version=").append(version);
    if (laboratory != null) builder.append(", laboratory=").append(laboratory);
    if (product_id != null) builder.append(", product_id=").append(product_id);
    if (type != null) builder.append(", type=").append(type);
    if (form != null) builder.append(", form=").append(form);
    if (amount != null) builder.append(", amount=").append(amount);
    if (amount_is_weight != null) builder.append(", amount_is_weight=").append(amount_is_weight);
    if (attenuation != null) builder.append(", attenuation=").append(attenuation);
    if (min_temp != null) builder.append(", min_temp=").append(min_temp);
    if (max_temp != null) builder.append(", max_temp=").append(max_temp);
    if (notes != null) builder.append(", notes=").append(notes);
    return builder.replace(0, 2, "Yeast{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Yeast, Builder> {
    public String name;

    public Integer version;

    public String laboratory;

    public String product_id;

    public YeastType type;

    public YeastForm form;

    public Double amount;

    public Boolean amount_is_weight;

    public Double attenuation;

    public Double min_temp;

    public Double max_temp;

    public String notes;

    public Builder() {
    }

    public Builder name(String name) {
      this.name = name;
      return this;
    }

    public Builder version(Integer version) {
      this.version = version;
      return this;
    }

    public Builder laboratory(String laboratory) {
      this.laboratory = laboratory;
      return this;
    }

    public Builder product_id(String product_id) {
      this.product_id = product_id;
      return this;
    }

    public Builder type(YeastType type) {
      this.type = type;
      return this;
    }

    public Builder form(YeastForm form) {
      this.form = form;
      return this;
    }

    public Builder amount(Double amount) {
      this.amount = amount;
      return this;
    }

    public Builder amount_is_weight(Boolean amount_is_weight) {
      this.amount_is_weight = amount_is_weight;
      return this;
    }

    public Builder attenuation(Double attenuation) {
      this.attenuation = attenuation;
      return this;
    }

    public Builder min_temp(Double min_temp) {
      this.min_temp = min_temp;
      return this;
    }

    public Builder max_temp(Double max_temp) {
      this.max_temp = max_temp;
      return this;
    }

    public Builder notes(String notes) {
      this.notes = notes;
      return this;
    }

    @Override
    public Yeast build() {
      return new Yeast(name, version, laboratory, product_id, type, form, amount, amount_is_weight, attenuation, min_temp, max_temp, notes, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Yeast extends ProtoAdapter<Yeast> {
    ProtoAdapter_Yeast() {
      super(FieldEncoding.LENGTH_DELIMITED, Yeast.class);
    }

    @Override
    public int encodedSize(Yeast value) {
      return (value.name != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.name) : 0)
          + (value.version != null ? ProtoAdapter.INT32.encodedSizeWithTag(2, value.version) : 0)
          + (value.laboratory != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.laboratory) : 0)
          + (value.product_id != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.product_id) : 0)
          + (value.type != null ? YeastType.ADAPTER.encodedSizeWithTag(5, value.type) : 0)
          + (value.form != null ? YeastForm.ADAPTER.encodedSizeWithTag(6, value.form) : 0)
          + (value.amount != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(7, value.amount) : 0)
          + (value.amount_is_weight != null ? ProtoAdapter.BOOL.encodedSizeWithTag(8, value.amount_is_weight) : 0)
          + (value.attenuation != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(9, value.attenuation) : 0)
          + (value.min_temp != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(10, value.min_temp) : 0)
          + (value.max_temp != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(11, value.max_temp) : 0)
          + (value.notes != null ? ProtoAdapter.STRING.encodedSizeWithTag(12, value.notes) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Yeast value) throws IOException {
      if (value.name != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name);
      if (value.version != null) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.version);
      if (value.laboratory != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.laboratory);
      if (value.product_id != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.product_id);
      if (value.type != null) YeastType.ADAPTER.encodeWithTag(writer, 5, value.type);
      if (value.form != null) YeastForm.ADAPTER.encodeWithTag(writer, 6, value.form);
      if (value.amount != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 7, value.amount);
      if (value.amount_is_weight != null) ProtoAdapter.BOOL.encodeWithTag(writer, 8, value.amount_is_weight);
      if (value.attenuation != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 9, value.attenuation);
      if (value.min_temp != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 10, value.min_temp);
      if (value.max_temp != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 11, value.max_temp);
      if (value.notes != null) ProtoAdapter.STRING.encodeWithTag(writer, 12, value.notes);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Yeast decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.name(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.version(ProtoAdapter.INT32.decode(reader)); break;
          case 3: builder.laboratory(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.product_id(ProtoAdapter.STRING.decode(reader)); break;
          case 5: {
            try {
              builder.type(YeastType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 6: {
            try {
              builder.form(YeastForm.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 7: builder.amount(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 8: builder.amount_is_weight(ProtoAdapter.BOOL.decode(reader)); break;
          case 9: builder.attenuation(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 10: builder.min_temp(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 11: builder.max_temp(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 12: builder.notes(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Yeast redact(Yeast value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
