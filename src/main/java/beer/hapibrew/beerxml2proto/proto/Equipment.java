// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: beer.proto at 196:1
package beer.hapibrew.beerxml2proto.proto;

import android.os.Parcelable;
import android.support.annotation.Nullable;
import com.squareup.wire.AndroidMessage;
import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class Equipment extends AndroidMessage<Equipment, Equipment.Builder> {
  public static final ProtoAdapter<Equipment> ADAPTER = new ProtoAdapter_Equipment();

  public static final Parcelable.Creator<Equipment> CREATOR = AndroidMessage.newCreator(ADAPTER);

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_NAME = "";

  public static final Integer DEFAULT_VERSION = 1;

  public static final Double DEFAULT_BOIL_SIZE = 0.0d;

  public static final Double DEFAULT_BATCH_SIZE = 0.0d;

  public static final Double DEFAULT_TUN_VOLUME = 0.0d;

  public static final Double DEFAULT_TOP_UP_WATER = 0.0d;

  public static final Double DEFAULT_TRUB_CHILLER_LOSS = 0.0d;

  public static final Double DEFAULT_EVAP_RATE = 0.0d;

  public static final Double DEFAULT_BOIL_TIME = 0.0d;

  public static final Boolean DEFAULT_CALC_BOIL_VOLUME = false;

  public static final String DEFAULT_NOTES = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @Nullable
  public final String name;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  @Nullable
  public final Integer version;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double boil_size;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double batch_size;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double tun_volume;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double top_up_water;

  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double trub_chiller_loss;

  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double evap_rate;

  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double boil_time;

  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  @Nullable
  public final Boolean calc_boil_volume;

  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @Nullable
  public final String notes;

  public Equipment(@Nullable String name, @Nullable Integer version, @Nullable Double boil_size, @Nullable Double batch_size, @Nullable Double tun_volume, @Nullable Double top_up_water, @Nullable Double trub_chiller_loss, @Nullable Double evap_rate, @Nullable Double boil_time, @Nullable Boolean calc_boil_volume, @Nullable String notes) {
    this(name, version, boil_size, batch_size, tun_volume, top_up_water, trub_chiller_loss, evap_rate, boil_time, calc_boil_volume, notes, ByteString.EMPTY);
  }

  public Equipment(@Nullable String name, @Nullable Integer version, @Nullable Double boil_size, @Nullable Double batch_size, @Nullable Double tun_volume, @Nullable Double top_up_water, @Nullable Double trub_chiller_loss, @Nullable Double evap_rate, @Nullable Double boil_time, @Nullable Boolean calc_boil_volume, @Nullable String notes, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.name = name;
    this.version = version;
    this.boil_size = boil_size;
    this.batch_size = batch_size;
    this.tun_volume = tun_volume;
    this.top_up_water = top_up_water;
    this.trub_chiller_loss = trub_chiller_loss;
    this.evap_rate = evap_rate;
    this.boil_time = boil_time;
    this.calc_boil_volume = calc_boil_volume;
    this.notes = notes;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.name = name;
    builder.version = version;
    builder.boil_size = boil_size;
    builder.batch_size = batch_size;
    builder.tun_volume = tun_volume;
    builder.top_up_water = top_up_water;
    builder.trub_chiller_loss = trub_chiller_loss;
    builder.evap_rate = evap_rate;
    builder.boil_time = boil_time;
    builder.calc_boil_volume = calc_boil_volume;
    builder.notes = notes;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Equipment)) return false;
    Equipment o = (Equipment) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(name, o.name)
        && Internal.equals(version, o.version)
        && Internal.equals(boil_size, o.boil_size)
        && Internal.equals(batch_size, o.batch_size)
        && Internal.equals(tun_volume, o.tun_volume)
        && Internal.equals(top_up_water, o.top_up_water)
        && Internal.equals(trub_chiller_loss, o.trub_chiller_loss)
        && Internal.equals(evap_rate, o.evap_rate)
        && Internal.equals(boil_time, o.boil_time)
        && Internal.equals(calc_boil_volume, o.calc_boil_volume)
        && Internal.equals(notes, o.notes);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (version != null ? version.hashCode() : 0);
      result = result * 37 + (boil_size != null ? boil_size.hashCode() : 0);
      result = result * 37 + (batch_size != null ? batch_size.hashCode() : 0);
      result = result * 37 + (tun_volume != null ? tun_volume.hashCode() : 0);
      result = result * 37 + (top_up_water != null ? top_up_water.hashCode() : 0);
      result = result * 37 + (trub_chiller_loss != null ? trub_chiller_loss.hashCode() : 0);
      result = result * 37 + (evap_rate != null ? evap_rate.hashCode() : 0);
      result = result * 37 + (boil_time != null ? boil_time.hashCode() : 0);
      result = result * 37 + (calc_boil_volume != null ? calc_boil_volume.hashCode() : 0);
      result = result * 37 + (notes != null ? notes.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (name != null) builder.append(", name=").append(name);
    if (version != null) builder.append(", version=").append(version);
    if (boil_size != null) builder.append(", boil_size=").append(boil_size);
    if (batch_size != null) builder.append(", batch_size=").append(batch_size);
    if (tun_volume != null) builder.append(", tun_volume=").append(tun_volume);
    if (top_up_water != null) builder.append(", top_up_water=").append(top_up_water);
    if (trub_chiller_loss != null) builder.append(", trub_chiller_loss=").append(trub_chiller_loss);
    if (evap_rate != null) builder.append(", evap_rate=").append(evap_rate);
    if (boil_time != null) builder.append(", boil_time=").append(boil_time);
    if (calc_boil_volume != null) builder.append(", calc_boil_volume=").append(calc_boil_volume);
    if (notes != null) builder.append(", notes=").append(notes);
    return builder.replace(0, 2, "Equipment{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Equipment, Builder> {
    public String name;

    public Integer version;

    public Double boil_size;

    public Double batch_size;

    public Double tun_volume;

    public Double top_up_water;

    public Double trub_chiller_loss;

    public Double evap_rate;

    public Double boil_time;

    public Boolean calc_boil_volume;

    public String notes;

    public Builder() {
    }

    public Builder name(String name) {
      this.name = name;
      return this;
    }

    public Builder version(Integer version) {
      this.version = version;
      return this;
    }

    public Builder boil_size(Double boil_size) {
      this.boil_size = boil_size;
      return this;
    }

    public Builder batch_size(Double batch_size) {
      this.batch_size = batch_size;
      return this;
    }

    public Builder tun_volume(Double tun_volume) {
      this.tun_volume = tun_volume;
      return this;
    }

    public Builder top_up_water(Double top_up_water) {
      this.top_up_water = top_up_water;
      return this;
    }

    public Builder trub_chiller_loss(Double trub_chiller_loss) {
      this.trub_chiller_loss = trub_chiller_loss;
      return this;
    }

    public Builder evap_rate(Double evap_rate) {
      this.evap_rate = evap_rate;
      return this;
    }

    public Builder boil_time(Double boil_time) {
      this.boil_time = boil_time;
      return this;
    }

    public Builder calc_boil_volume(Boolean calc_boil_volume) {
      this.calc_boil_volume = calc_boil_volume;
      return this;
    }

    public Builder notes(String notes) {
      this.notes = notes;
      return this;
    }

    @Override
    public Equipment build() {
      return new Equipment(name, version, boil_size, batch_size, tun_volume, top_up_water, trub_chiller_loss, evap_rate, boil_time, calc_boil_volume, notes, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Equipment extends ProtoAdapter<Equipment> {
    ProtoAdapter_Equipment() {
      super(FieldEncoding.LENGTH_DELIMITED, Equipment.class);
    }

    @Override
    public int encodedSize(Equipment value) {
      return (value.name != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.name) : 0)
          + (value.version != null ? ProtoAdapter.INT32.encodedSizeWithTag(2, value.version) : 0)
          + (value.boil_size != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(3, value.boil_size) : 0)
          + (value.batch_size != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(4, value.batch_size) : 0)
          + (value.tun_volume != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(5, value.tun_volume) : 0)
          + (value.top_up_water != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(6, value.top_up_water) : 0)
          + (value.trub_chiller_loss != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(7, value.trub_chiller_loss) : 0)
          + (value.evap_rate != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(8, value.evap_rate) : 0)
          + (value.boil_time != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(9, value.boil_time) : 0)
          + (value.calc_boil_volume != null ? ProtoAdapter.BOOL.encodedSizeWithTag(10, value.calc_boil_volume) : 0)
          + (value.notes != null ? ProtoAdapter.STRING.encodedSizeWithTag(11, value.notes) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Equipment value) throws IOException {
      if (value.name != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name);
      if (value.version != null) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.version);
      if (value.boil_size != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 3, value.boil_size);
      if (value.batch_size != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 4, value.batch_size);
      if (value.tun_volume != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 5, value.tun_volume);
      if (value.top_up_water != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 6, value.top_up_water);
      if (value.trub_chiller_loss != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 7, value.trub_chiller_loss);
      if (value.evap_rate != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 8, value.evap_rate);
      if (value.boil_time != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 9, value.boil_time);
      if (value.calc_boil_volume != null) ProtoAdapter.BOOL.encodeWithTag(writer, 10, value.calc_boil_volume);
      if (value.notes != null) ProtoAdapter.STRING.encodeWithTag(writer, 11, value.notes);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Equipment decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.name(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.version(ProtoAdapter.INT32.decode(reader)); break;
          case 3: builder.boil_size(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 4: builder.batch_size(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 5: builder.tun_volume(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 6: builder.top_up_water(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 7: builder.trub_chiller_loss(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 8: builder.evap_rate(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 9: builder.boil_time(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 10: builder.calc_boil_volume(ProtoAdapter.BOOL.decode(reader)); break;
          case 11: builder.notes(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Equipment redact(Equipment value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
