// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: beer.proto at 161:1
package beer.hapibrew.beerxml2proto.proto;

import android.os.Parcelable;
import android.support.annotation.Nullable;
import com.squareup.wire.AndroidMessage;
import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class Water extends AndroidMessage<Water, Water.Builder> {
  public static final ProtoAdapter<Water> ADAPTER = new ProtoAdapter_Water();

  public static final Parcelable.Creator<Water> CREATOR = AndroidMessage.newCreator(ADAPTER);

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_NAME = "";

  public static final Integer DEFAULT_VERSION = 1;

  public static final Double DEFAULT_AMOUNT = 0.0d;

  public static final Double DEFAULT_CALCIUM = 0.0d;

  public static final Double DEFAULT_BICARBONATE = 0.0d;

  public static final Double DEFAULT_SULFATE = 0.0d;

  public static final Double DEFAULT_CHLORIDE = 0.0d;

  public static final Double DEFAULT_SODIUM = 0.0d;

  public static final Double DEFAULT_MAGNESIUM = 0.0d;

  public static final String DEFAULT_NOTES = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @Nullable
  public final String name;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  @Nullable
  public final Integer version;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double amount;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double calcium;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double bicarbonate;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double sulfate;

  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double chloride;

  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double sodium;

  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  @Nullable
  public final Double magnesium;

  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @Nullable
  public final String notes;

  public Water(@Nullable String name, @Nullable Integer version, @Nullable Double amount, @Nullable Double calcium, @Nullable Double bicarbonate, @Nullable Double sulfate, @Nullable Double chloride, @Nullable Double sodium, @Nullable Double magnesium, @Nullable String notes) {
    this(name, version, amount, calcium, bicarbonate, sulfate, chloride, sodium, magnesium, notes, ByteString.EMPTY);
  }

  public Water(@Nullable String name, @Nullable Integer version, @Nullable Double amount, @Nullable Double calcium, @Nullable Double bicarbonate, @Nullable Double sulfate, @Nullable Double chloride, @Nullable Double sodium, @Nullable Double magnesium, @Nullable String notes, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.name = name;
    this.version = version;
    this.amount = amount;
    this.calcium = calcium;
    this.bicarbonate = bicarbonate;
    this.sulfate = sulfate;
    this.chloride = chloride;
    this.sodium = sodium;
    this.magnesium = magnesium;
    this.notes = notes;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.name = name;
    builder.version = version;
    builder.amount = amount;
    builder.calcium = calcium;
    builder.bicarbonate = bicarbonate;
    builder.sulfate = sulfate;
    builder.chloride = chloride;
    builder.sodium = sodium;
    builder.magnesium = magnesium;
    builder.notes = notes;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Water)) return false;
    Water o = (Water) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(name, o.name)
        && Internal.equals(version, o.version)
        && Internal.equals(amount, o.amount)
        && Internal.equals(calcium, o.calcium)
        && Internal.equals(bicarbonate, o.bicarbonate)
        && Internal.equals(sulfate, o.sulfate)
        && Internal.equals(chloride, o.chloride)
        && Internal.equals(sodium, o.sodium)
        && Internal.equals(magnesium, o.magnesium)
        && Internal.equals(notes, o.notes);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (version != null ? version.hashCode() : 0);
      result = result * 37 + (amount != null ? amount.hashCode() : 0);
      result = result * 37 + (calcium != null ? calcium.hashCode() : 0);
      result = result * 37 + (bicarbonate != null ? bicarbonate.hashCode() : 0);
      result = result * 37 + (sulfate != null ? sulfate.hashCode() : 0);
      result = result * 37 + (chloride != null ? chloride.hashCode() : 0);
      result = result * 37 + (sodium != null ? sodium.hashCode() : 0);
      result = result * 37 + (magnesium != null ? magnesium.hashCode() : 0);
      result = result * 37 + (notes != null ? notes.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (name != null) builder.append(", name=").append(name);
    if (version != null) builder.append(", version=").append(version);
    if (amount != null) builder.append(", amount=").append(amount);
    if (calcium != null) builder.append(", calcium=").append(calcium);
    if (bicarbonate != null) builder.append(", bicarbonate=").append(bicarbonate);
    if (sulfate != null) builder.append(", sulfate=").append(sulfate);
    if (chloride != null) builder.append(", chloride=").append(chloride);
    if (sodium != null) builder.append(", sodium=").append(sodium);
    if (magnesium != null) builder.append(", magnesium=").append(magnesium);
    if (notes != null) builder.append(", notes=").append(notes);
    return builder.replace(0, 2, "Water{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Water, Builder> {
    public String name;

    public Integer version;

    public Double amount;

    public Double calcium;

    public Double bicarbonate;

    public Double sulfate;

    public Double chloride;

    public Double sodium;

    public Double magnesium;

    public String notes;

    public Builder() {
    }

    public Builder name(String name) {
      this.name = name;
      return this;
    }

    public Builder version(Integer version) {
      this.version = version;
      return this;
    }

    public Builder amount(Double amount) {
      this.amount = amount;
      return this;
    }

    public Builder calcium(Double calcium) {
      this.calcium = calcium;
      return this;
    }

    public Builder bicarbonate(Double bicarbonate) {
      this.bicarbonate = bicarbonate;
      return this;
    }

    public Builder sulfate(Double sulfate) {
      this.sulfate = sulfate;
      return this;
    }

    public Builder chloride(Double chloride) {
      this.chloride = chloride;
      return this;
    }

    public Builder sodium(Double sodium) {
      this.sodium = sodium;
      return this;
    }

    public Builder magnesium(Double magnesium) {
      this.magnesium = magnesium;
      return this;
    }

    public Builder notes(String notes) {
      this.notes = notes;
      return this;
    }

    @Override
    public Water build() {
      return new Water(name, version, amount, calcium, bicarbonate, sulfate, chloride, sodium, magnesium, notes, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Water extends ProtoAdapter<Water> {
    ProtoAdapter_Water() {
      super(FieldEncoding.LENGTH_DELIMITED, Water.class);
    }

    @Override
    public int encodedSize(Water value) {
      return (value.name != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.name) : 0)
          + (value.version != null ? ProtoAdapter.INT32.encodedSizeWithTag(2, value.version) : 0)
          + (value.amount != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(3, value.amount) : 0)
          + (value.calcium != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(4, value.calcium) : 0)
          + (value.bicarbonate != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(5, value.bicarbonate) : 0)
          + (value.sulfate != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(6, value.sulfate) : 0)
          + (value.chloride != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(7, value.chloride) : 0)
          + (value.sodium != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(8, value.sodium) : 0)
          + (value.magnesium != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(9, value.magnesium) : 0)
          + (value.notes != null ? ProtoAdapter.STRING.encodedSizeWithTag(10, value.notes) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Water value) throws IOException {
      if (value.name != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name);
      if (value.version != null) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.version);
      if (value.amount != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 3, value.amount);
      if (value.calcium != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 4, value.calcium);
      if (value.bicarbonate != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 5, value.bicarbonate);
      if (value.sulfate != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 6, value.sulfate);
      if (value.chloride != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 7, value.chloride);
      if (value.sodium != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 8, value.sodium);
      if (value.magnesium != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 9, value.magnesium);
      if (value.notes != null) ProtoAdapter.STRING.encodeWithTag(writer, 10, value.notes);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Water decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.name(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.version(ProtoAdapter.INT32.decode(reader)); break;
          case 3: builder.amount(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 4: builder.calcium(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 5: builder.bicarbonate(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 6: builder.sulfate(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 7: builder.chloride(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 8: builder.sodium(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 9: builder.magnesium(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 10: builder.notes(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Water redact(Water value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
